TODO

-----------

-- Python style """ multiline strings.  

-- remove constants from interpreter, replace with a library.

------------

Done, but maybe Further Test

(*) move/copy operators for proc args.  Also allows expressions.
(*) initializers for seq, maps (not the easiest thing ever, but not
    too tough) -- ok, maybe a bit more testing, but I think this is
    done.
(*) allow assignment inside variable declarations.
(*) initializers for proc arguments

TODO:

(*) move/copy operators for assignments?  Could be pretty sweet!  But,
    as it is, I have omni.move and omni.copy, so no real need for
    them, except it would be useful somewhat in assignments in
    declarations.  But, I'm still kind of in my "minimilism" phase,
    and this just seems like unnecessary syntax.

    For the most part, this influx of operators has either provided
    needed functionality, or been a lot more useful than merely using
    an assignment instead of a proc call.  Nesting maps, in particular,
    was an unduly painful process before.

---

(*) consider switching away from the dynamic scoping.  But, I don't
    want real global variables, that would be confusing, since people
    would think they could use them in the load phase and have it
    carry over to the run phase.  An alternative would be to have
    "both," and have "dyn" as an alternative to "var".  But, I don't
    currently have a good mechanism for making this work.  So, it is
    something to consider when I change my data structures around.
(*) Write boost::geometry stuff.  I plan on using this stuff in my
    next project anyway.  Also, stop trying to switch to vim.  It's
    not going to work.  I will keep using it for little things I
    suppose, I want to be able to use it at a respectable level.  But
    I have to be able to churn out text, and I just can't do that
    nearly as well with anything else right now.
(*) write some samples. -- ok, once I can clip a polygon, I'm good to
    go.
(*) write up some documentation.  -- done a fair bit of this, enough
    to call it started anyway.  I haven't gotten to types, or to maps
    and sequences, or to the C api.

------------------------------

(*)  get "real" data structures for interpreter --

    (*) Get an array type structure for the value stack.  I think a
        realloc would be really bad here, so I am leaning more towards
        dealing with linked lists of arrays I can consider optomizing
        this a little bit to reduce malloc calls, but just getting the
        basic structure up would be a good start.

    (*) And then, basically, fix all the data structures to be
        somewhat more sane than single linked listing everything.  I
        think a good, easy place to go, is to generally adopt qsort
        and bsearch as the way to deal with associative arrays.
        except for the replacement of the "env->block_stack"
        structure, that will be a single vector of values, with some
        "stack pointer" type values in it, combined with a symbol
        table for lookups.  At least for a first try it wouldn't be so
        bad.  At this stage I might make some api/parser changes as
        well, since some of these routines would be more efficient if
        they knew how large to make the initial array.

(*) improved string support -- characters, slices, to at least allow
some remedial string processing.

ONGOING

(*) Flesh out with library routines/special forms, but try to avoid
adding syntax -- pretty sure everything can be done without it now.

   (*) raw buffer
   (*) files

(*) yield statements!

(*) Create fial to C compiler -- preferably using FIAL, but python is
another possibility.  C is also a reasonable choice, it would just
might be a tad harder to use it than I would like -- it is, at bottom,
largely a string processing problem.  And doing it in FIAL would be a
good exercise.

----------------------------------------

NOTES:

--------------------

C API redux

--------------------

Errors:

OK, this is more or less done now.  Obviously, there is room for
improvement, but it is now generally working, and it's fairly obvious
that this set up is going to work. If anything, it's overkill.

Finish this up, I still have stray assertions.

--------------------

Structural todo:

(*) on lib creation, I should make sure that a library's symbol isn't
clobbered by the omni lib, and at least warn if it is.  But I can hold
off on this until I have a better error system.

--------------------

Symbols will only make sense in relationship to a particular
interpreter.  It will be the programmer's responsiblity to keep them
straight.  Helper functions / containers might be provided later --
the difficulty only arises when using the C api, or when using a
library that creates its own FIAL interpreter.

--------------------

C api, design:

--------------------

Fundamentally, there are three interfaces:

(a) top level -- create interpreter, load libraries, run procedures,
destroy interpreters, etc.

(b) library -- define libraries with functions to be called as if they
qwere fial procs.

(c) types -- define a type, not much more to it than that.  I think a
library and proc are fine for the purpose of a derez proc.

--------------------
